generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next Auth

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  isAdmin Boolean @default(false)

  registeredAt DateTime @default(now())

  schoolId    String?
  age         Int?
  classNumber Int?
  nickname    String?
  phoneNum    String?

  qpoint Int @default(0)

  posts Post[]
  chats Chat[]
  reports PostReport[]
  
  alert Alert[]

  myLikes Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         Int      @id @unique @default(autoincrement())
  content    String
  title      String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  uploadedAt DateTime @default(now())

  onlyAuthorChat Boolean @default(false)
  chats      Chat[]

  likes Like[]

  categoryID Int
  category   Category @relation(fields: [categoryID], references: [id])

  reports PostReport[]

  isGPTOnly Boolean @default(false)
}

model Like {
  id String @id @unique @default(cuid())
  
  author User @relation(references: [id],fields: [authorID])
  post Post @relation(references: [id],fields: [postID])

  postID Int
  authorID String
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(24)
  show Boolean @default(true)
  posts Post[]
}

model Chat {
  id String @id @unique @default(cuid())

  postID Int
  post   Post @relation(fields: [postID], references: [id])

  content  String
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  authorkey Int @default(autoincrement())

  isGptRecall Boolean @default(false)

  uploadedAt DateTime @default(now())
}

model School {
  id String @unique
  areaCode String
  office String
  schoolName String
  schoolEngName String
  schoolType String
  city String
  eduDiv String
  releaseType String
  address String
  phoneNumber String
  url String
  genderDiv String
}

model PostReport {
  id String @id @unique @default(cuid())

  content String

  postID Int
  post Post @relation(fields: [postID], references: [id])

  reporterId String
  reporter User @relation(fields: [reporterId], references: [id])

  reportedAt DateTime @default(now())
}

model Alert {
  id String @id @unique @default(cuid())
  type Int
  data String
  userId String
  user User @relation(fields: [userId], references: [id])
  uploadAt String
}